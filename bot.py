import logging
import os
import asyncio
import shutil
from datetime import datetime
import json
import io
import pandas as pd

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    FSInputFile
)
from dotenv import load_dotenv

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –ø–∞—Ä—Å–µ—Ä–∞
from ali_parse import (
    headers,
    parse_item,
    parse_query,
    get_item_id_from_url,
    get_items_list_from_query,
    parse_items_from_query
)
from data import (
    get_item_info,
    get_shopify_one_item,
    save_json,
    save_csv,
    save_shopify_csv_one_item,
    save_shopify_csv_list_items
)
from hosting import upload_photos

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –Ω–∞–∑–≤ –∑–º—ñ–Ω–Ω–∏—Ö
BOT_TOKEN = (
    os.getenv("TELEGRAM_BOT_TOKEN") or 
    os.getenv("TELEGRAM_API_KEY") or 
    os.getenv("BOT_TOKEN")
)

if not BOT_TOKEN:
    raise ValueError(
        "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! "
        "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤ —Ñ–∞–π–ª—ñ .env –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ TELEGRAM_API_KEY"
    )

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—à—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
RAPID_API_KEY = os.getenv("RAPID_API_KEY")
if not RAPID_API_KEY:
    raise ValueError(
        "API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! "
        "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤ —Ñ–∞–π–ª—ñ .env –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ RAPID_API_KEY"
    )

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
if not os.path.exists("list_items"):
    os.makedirs("list_items")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°—Ç–∞–Ω–∏ FSM
class ParsingStates(StatesGroup):
    choosing_mode = State()
    entering_link = State()
    entering_limit = State()
    parsing = State()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –ü–æ—á–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥")],
        [KeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞")]
    ],
    resize_keyboard=True
)

mode_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="Single", callback_data="mode_single"),
            InlineKeyboardButton(text="Query", callback_data="mode_query"),
            InlineKeyboardButton(text="Multiple", callback_data="mode_multiple")
        ],
        [InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
)

limit_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="3", callback_data="limit_3"),
            InlineKeyboardButton(text="5", callback_data="limit_5"),
            InlineKeyboardButton(text="7", callback_data="limit_7")
        ],
        [
            InlineKeyboardButton(text="10", callback_data="limit_10"),
            InlineKeyboardButton(text="20", callback_data="limit_20"),
            InlineKeyboardButton(text="30", callback_data="limit_30")
        ],
        [
            InlineKeyboardButton(text="40", callback_data="limit_40"),
            InlineKeyboardButton(text="50", callback_data="limit_50"),
            InlineKeyboardButton(text="60", callback_data="limit_60")
        ],
        [InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
)

async def update_status_message(message: types.Message, text: str):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        await message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]]
            )
        )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")

async def start_parsing_process(message: types.Message, state: FSMContext):
    data = await state.get_data()
    mode = data['mode']
    link = data['link']
    limit = data.get('limit', 1)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    status_message = await message.answer("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥...")
    logs = []
    
    async def update_status(text: str):
        logs.append(text)
        try:
            await status_message.edit_text("\n".join(logs))
        except Exception as e:
            if "message is not modified" not in str(e):
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")
    
    try:
        if mode == "single":
            await update_status("‚öôÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É...")
            item_id = get_item_id_from_url(link)
            if not item_id:
                await status_message.edit_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
                return
                
            await update_status("‚è≥ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—É...")
            item_data = await parse_item(headers, item_id)
            if not item_data:
                await status_message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É")
                return
                
            await update_status("‚öôÔ∏è –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö...")
            item_dict = get_item_info(item_data)
            
            await update_status("üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π...")
            main_photos_url = upload_photos(item_dict["MainPhotoLinks"], f"{item_id}/MainPhotos")
            
            await update_status("üõçÔ∏è –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è Shopify...")
            shopify_info = get_shopify_one_item(item_dict, main_photos_url)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ state
            await state.update_data({
                'json_data': json.dumps(item_dict, ensure_ascii=False, indent=2),
                'csv_data': pd.DataFrame([item_dict]).to_csv(index=False),
                'shopify_data': pd.DataFrame(shopify_info).to_csv(index=False),
                'item_id': item_id
            })

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            download_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ JSON", callback_data="download_json")],
                [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", callback_data="download_csv")],
                [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Shopify CSV", callback_data="download_shopify")],
                [InlineKeyboardButton(text="üîÑ –ù–æ–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥", callback_data="new_parsing")]
            ])

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            await status_message.edit_text(
                "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
                reply_markup=download_keyboard
            )

        elif mode == "query":
            await update_status(f"‚öôÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º (–ª—ñ–º—ñ—Ç: {limit})...")
            query_data = await parse_query(headers, link)
            if not query_data:
                await status_message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –∑–∞–ø–∏—Ç—É")
                return
                
            items_list = get_items_list_from_query(query_data)[:limit]
            items_data = []
            shopify_list = []
            
            for idx, item_id in enumerate(items_list, 1):
                await update_status(f"üì¶ –û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä—É {idx}/{limit}")
                item_data = await parse_item(headers, item_id)
                if item_data:
                    item_dict = get_item_info(item_data)
                    items_data.append(item_dict)
                    main_photos_url = upload_photos(item_dict["MainPhotoLinks"], f"{item_id}/MainPhotos")
                    shopify_info = get_shopify_one_item(item_dict, main_photos_url)
                    shopify_list.append(shopify_info)
                    await update_status(f"‚úÖ –¢–æ–≤–∞—Ä {idx} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            
            if items_data:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ state
                await state.update_data({
                    'json_data': json.dumps(items_data, ensure_ascii=False, indent=2),
                    'csv_data': pd.DataFrame(items_data).to_csv(index=False),
                    'shopify_data': pd.DataFrame(shopify_list).to_csv(index=False),
                    'item_id': 'query_result'
                })

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                download_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ JSON", callback_data="download_json")],
                    [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", callback_data="download_csv")],
                    [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Shopify CSV", callback_data="download_shopify")],
                    [InlineKeyboardButton(text="üîÑ –ù–æ–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥", callback_data="new_parsing")]
                ])

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
                await status_message.edit_text(
                    "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
                    reply_markup=download_keyboard
                )

        elif mode == "multiple":
            links_list = [l.strip() for l in link.split(",") if l.strip()]
            if not links_list:
                await status_message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ—Å–∏–ª–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π")
                return
            
            items_data = []
            shopify_list = []
            
            for idx, item_link in enumerate(links_list, 1):
                await update_status(f"üì¶ –û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä—É {idx}/{len(links_list)}")
                
                item_id = get_item_id_from_url(item_link)
                if not item_id:
                    await update_status(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–≤–∞—Ä {idx}: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
                    continue
                
                item_data = await parse_item(headers, item_id)
                if not item_data:
                    await update_status(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–≤–∞—Ä {idx}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö")
                    continue
                
                item_dict = get_item_info(item_data)
                items_data.append(item_dict)
                
                main_photos_url = upload_photos(item_dict["MainPhotoLinks"], f"{item_id}/MainPhotos")
                shopify_info = get_shopify_one_item(item_dict, main_photos_url)
                shopify_list.append(shopify_info)
                
                await update_status(f"‚úÖ –¢–æ–≤–∞—Ä {idx} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ")
            
            if items_data:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ state
                await state.update_data({
                    'json_data': json.dumps(items_data, ensure_ascii=False, indent=2),
                    'csv_data': pd.DataFrame(items_data).to_csv(index=False),
                    'shopify_data': pd.DataFrame(shopify_list).to_csv(index=False),
                    'item_id': 'multiple_result'
                })

                # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                download_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ JSON", callback_data="download_json")],
                    [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV", callback_data="download_csv")],
                    [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Shopify CSV", callback_data="download_shopify")],
                    [InlineKeyboardButton(text="üîÑ –ù–æ–≤–∏–π –ø–∞—Ä—Å–∏–Ω–≥", callback_data="new_parsing")]
                ])

                # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
                await status_message.edit_text(
                    "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
                    reply_markup=download_keyboard
                )
            else:
                await status_message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await status_message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É: {str(e)}")

@dp.callback_query(lambda c: c.data == "new_parsing")
async def new_parsing(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(ParsingStates.choosing_mode)
    await callback.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É:",
        reply_markup=mode_keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("download_"))
async def process_download(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        file_type = callback.data.split("_")[1]
        item_id = data.get('item_id')

        if file_type == "json":
            file_data = data.get('json_data').encode()
            filename = f"item_{item_id}.json"
            caption = "üìÑ JSON —Ñ–∞–π–ª"
        elif file_type == "csv":
            file_data = data.get('csv_data').encode()
            filename = f"item_{item_id}.csv"
            caption = "üìÑ CSV —Ñ–∞–π–ª"
        elif file_type == "shopify":
            file_data = data.get('shopify_data').encode()
            filename = f"item_{item_id}_shopify.csv"
            caption = "üìÑ Shopify CSV —Ñ–∞–π–ª"
        
        await callback.message.answer_document(
            document=types.BufferedInputFile(file_data, filename=filename),
            caption=caption
        )
        await callback.answer("‚úÖ –§–∞–π–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("mode_"))
async def process_mode_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É –ø–∞—Ä—Å–∏–Ω–≥—É"""
    mode = callback.data.split('_')[1]
    
    if mode == "back":
        await callback.answer()
        await state.clear()
        await callback.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=main_keyboard)
        return
        
    await callback.answer()
    await state.update_data(mode=mode)
    
    if mode == "query":
        await callback.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –ª—ñ–º—ñ—Ç —Ç–æ–≤–∞—Ä—ñ–≤:",
            reply_markup=limit_keyboard
        )
        await state.set_state(ParsingStates.entering_limit)
    else:
        await state.set_state(ParsingStates.entering_link)
        message_text = (
            "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä:" if mode == "single"
            else "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:"
        )
        await callback.message.edit_text(message_text)

@dp.callback_query(lambda c: c.data.startswith("limit_"))
async def process_limit_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –ª—ñ–º—ñ—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤"""
    limit = int(callback.data.split("_")[1])
    await state.update_data(limit=limit)
    await state.set_state(ParsingStates.entering_link)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç:")

@dp.callback_query(lambda c: c.data == "main_menu")
async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=main_keyboard
    )
    await callback.answer()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É AliExpress.\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=main_keyboard
    )

@dp.message(lambda m: m.text == "üöÄ –ü–æ—á–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥")
async def start_parsing_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—á–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥'"""
    await state.set_state(ParsingStates.choosing_mode)
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥—É:",
        reply_markup=mode_keyboard
    )

@dp.message(lambda m: m.text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞")
async def help_command(message: types.Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–ø–æ–º–æ–≥–∞'"""
    help_text = (
          
        "ü§ñ *AliExpress Parser Bot*\n\n"
        
        "üéØ *–†–µ–∂–∏–º–∏:*\n"
        "‚Ä¢ Single - –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä\n"
        "‚Ä¢ Query - –ø–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤\n"
        "‚Ä¢ Multiple - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤\n\n"
        
        "üì± *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:*\n"
        "1.–¢–∏—Å–Ω–∏ '–ü–æ—á–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥'\n"
        "2.–û–±–µ—Ä–∏ —Ä–µ–∂–∏–º\n"
        "3.–í–≤–µ–¥–∏ –¥–∞–Ω—ñ\n"
        "4.–ß–µ–∫–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "5.–ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–∞–π–ª–∏\n\n"
        
        "‚ö°Ô∏è *–õ—ñ–º—ñ—Ç–∏ API:*\n"
        "üîÑ 300 –∑–∞–ø–∏—Ç—ñ–≤/–¥–µ–Ω—å\n"
        "‚Ä¢ Single - 2 –∑–∞–ø–∏—Ç–∏\n"
        "‚Ä¢ Query - 3+ –∑–∞–ø–∏—Ç–∏\n"
        "‚Ä¢ Multiple - 2 –∑–∞–ø–∏—Ç–∏/—Ç–æ–≤–∞—Ä\n\n"
        
        "‚ö†Ô∏è *–ü–æ–º–∏–ª–∫–∏:*\n"
        "üî¥ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ:\n"
        "‚Ä¢ –õ—ñ–º—ñ—Ç API –≤–∏—á–µ—Ä–ø–∞–Ω–æ\n"
        "‚Ä¢ –ó–∞—á–µ–∫–∞–π 24 –≥–æ–¥–∏–Ω–∏\n\n"
        
        "üî¥ –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç\n"
        "‚Ä¢ –ú–æ–∂–ª–∏–≤–æ –ª—ñ–º—ñ—Ç API\n\n"
        
        "üî¥ –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É\n\n"
        
        "üì¶ *–§–∞–π–ª–∏:*\n"
        "üìó JSON - –≤—Å—ñ –¥–∞–Ω—ñ\n"
        "üìò CSV - –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ\n"
        "üìô Shopify - –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É\n\n"
        
        "üí° *–ü–æ—Ä–∞–¥–∏:*\n"
        "‚Ä¢ Single - –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É\n"
        "‚Ä¢ Query - –¥–ª—è –ø–æ—à—É–∫—É\n"
        "‚Ä¢ Multiple - –¥–ª—è —Å–ø–∏—Å–∫—ñ–≤\n\n"
        
        "‚ùóÔ∏è *–í–∞–∂–ª–∏–≤–æ:*\n"
        "‚Ä¢ –°–ª—ñ–¥–∫—É–π –∑–∞ –ª—ñ–º—ñ—Ç–æ–º - –Ω–µ –±—ñ–ª—å—à–µ 300 –∑–∞–ø–∏—Ç—ñ–≤/–¥–µ–Ω—å\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
        "‚Ä¢ –î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –∂–º–∏ - üîô–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é\n\n"
        
        "‚ú® *–£—Å–ø—ñ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É* ‚ú®"
    )
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(StateFilter(ParsingStates.entering_link))
async def process_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è/–∑–∞–ø–∏—Ç—É"""
    data = await state.get_data()
    await state.update_data(link=message.text)
    
    # –û–¥—Ä–∞–∑—É –ø–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥
    await start_parsing_process(message, state)

@dp.message()
async def unknown_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥"""
    current_state = await state.get_state()
    if not current_state:  # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await message.answer(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=main_keyboard
        )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
